package xhsreq

import (
	"bytes"
	"context"
	"io"
	"log/slog"
	"net/http"
	"strconv"
	"time"

	"github.com/davecgh/go-spew/spew"
	"github.com/pkg/errors"
	"github.com/spf13/cast"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"

	"PulseCheck/internal/tools"
)

type Review struct {
	Id       string   `json:"id"`
	Content  string   `json:"content"`
	SkuInfo  *SkuInfo `json:"sku_info"`
	Score    *Score   `json:"score"`
	ReplyNum uint     `json:"reply_num"`
}

type SkuInfo struct {
	SkuID    string `json:"sku_id"`
	SkuName  string `json:"sku_name"`
	SkuPrice int    `json:"sku_price"`
	ItemID   string `json:"item_id"`
	OrderID  string `json:"order_id"`
}

type Score struct {
	SkuScore       uint8 `json:"sku_score"`
	ServiceScore   uint8 `json:"service_score"`
	LogisticsScore uint8 `json:"logistics_score"`
}

type ReviewSearchParam struct {
	ContentTypeList       []int
	ReviewReplyStatusList []int
	OrderID               string
	StartTime             *time.Time
	EndTime               *time.Time
	PageSize              int
}

type ReviewManager struct {
	httpClient *http.Client
}

const (
	OrderIdKey                   = "comprehensive_search_text"
	PageSizeKey                  = "page_size"
	DefaultPageSizeValue         = 20
	PageNumKey                   = "page"
	DefaultPageNumValue          = 1
	SourceKey                    = "source"
	DefaultSourceKey             = 0
	ContentTypeArrayPrefix       = "content_type_list."
	ReviewReplyStatusArrayPrefix = "review_reply_status_list."
	ReviewStartTimeKey           = "review_start_time"
	ReviewEndTimeKey             = "review_end_time"
)

func (this *ReviewManager) newRequestBody(ctx context.Context, param *ReviewSearchParam) ([]byte, error) {
	// YANGMU_TODO: 2024/10/26 -- need to verify param beforehand
	json := []byte("{}")
	if nil == param {
		return nil, errors.New("param should not be nil")
	}
	// general configuration for request body
	json, _ = sjson.SetBytes(json, PageSizeKey, DefaultPageSizeValue)
	json, _ = sjson.SetBytes(json, SourceKey, DefaultSourceKey)
	json, _ = sjson.SetBytes(json, PageNumKey, DefaultPageNumValue)
	// case1: retrieve the review record only by order id
	if len(param.OrderID) != 0 {
		json, _ = sjson.SetBytes(json, OrderIdKey, param.OrderID)
		return json, nil
	}

	// case2: retrieve review records by other filter conditions
	if len(param.ContentTypeList) != 0 {
		for i, contentType := range param.ContentTypeList {
			key := ContentTypeArrayPrefix + strconv.Itoa(i)
			json, _ = sjson.SetBytes(json, key, contentType)
		}
	}
	if len(param.ReviewReplyStatusList) != 0 {
		for i, reviewReplyStatus := range param.ReviewReplyStatusList {
			key := ReviewReplyStatusArrayPrefix + cast.ToString(i)
			json, _ = sjson.SetBytes(json, key, reviewReplyStatus)
		}
	}
	if param.StartTime != nil {
		json, _ = sjson.SetBytes(json, ReviewStartTimeKey, param.StartTime.Unix())
	}
	if param.EndTime != nil {
		json, _ = sjson.SetBytes(json, ReviewEndTimeKey, param.EndTime.Unix())
	}
	return json, nil
}

func NewReviewManager(ctx context.Context, httpClient *http.Client) *ReviewManager {
	return &ReviewManager{httpClient: httpClient}
}

const (
	XHSReviewMangerURL = "https://ark.xiaohongshu.com/api/edith/review/v2/seller/review_manager"
)

func (this *ReviewManager) GetReviews(ctx context.Context, param *ReviewSearchParam) (reviews []*Review, err error) {
	requestBody, err := this.newRequestBody(ctx, param)
	if nil != err {
		return nil, errors.WithMessagef(err, "newRequestBody fail with param:%#v", param)
	}
	reqBodyStr := string(requestBody)
	slog.Info(spew.Sprintf("request body:%#v generated by param:%#v", reqBodyStr, param))

	request, err := http.NewRequestWithContext(ctx, http.MethodPost, XHSReviewMangerURL, bytes.NewReader(requestBody))
	if nil != err {
		return nil, errors.WithMessagef(err, "construct xiaohongshu statistics request error. param:%#v, body:%#v", param, reqBodyStr)
	}
	err = ResetCommonHeaders(ctx, request.Header)
	AddRefererHeader(ctx, request.Header, "https://ark.xiaohongshu.com/app-item/comment/analysis")
	if nil != err {
		return nil, errors.WithMessagef(err, "request header fail with param:%#v requestbody:%#v", param, reqBodyStr)
	}
	response, err := this.httpClient.Do(request)
	if nil != err {
		return nil, errors.WithMessagef(err, "request failed with param:%#v requestBody:%#v", param, reqBodyStr)
	}
	statusCode := response.StatusCode
	if statusCode != http.StatusOK {
		slog.Error("get xiaohongshu response error.",
			slog.String("xiaohognshuURL", XHSReviewMangerURL),
			slog.Int("statusCode", statusCode),
			slog.String("body", string(requestBody)),
		)
		return nil, errors.Errorf("get xiaohongshu response error. xiaohongshuURL:%s statusCode:%d requestBody:%s",
			XHSReviewMangerURL, statusCode, reqBodyStr)
	}
	respBody := response.Body
	defer func() {
		err := respBody.Close()
		if err != nil {
			slog.Error("close response body err.", tools.ErrAttr(err))
		}
	}()
	b, err := io.ReadAll(respBody)
	if err != nil {
		return nil, errors.WithMessagef(err, "read response body fail with param:%#v body:%#v", param, reqBodyStr)
	}

	respData, err1 := this.unmarshal(b)
	if nil != err1 {
		return nil, errors.WithMessagef(err1, "unmarshal body data error. ")
	}
	return respData, nil
}

const (
	CODE_SUCCESS = 0
)

const (
	Data           Path = "data"
	ReviewInfoList Path = "review_info_list"
	SkuInfo1       Path = "sku_info"
	SkuID          Path = "sku_id"
	SkuName        Path = "name"
	SkuPrice       Path = "price"
	ItemID         Path = "item_id"
	OrderID        Path = "order_id"

	ReviewData Path = "review_data"
	Content    Path = "content"
	Text       Path = "text"

	ReviewID        Path = "review_id"
	InteractionInfo Path = "interaction_info"
	ReplyNum        Path = "reply_num"

	ServiceScore   Path = "service_score"
	SkuScore       Path = "sku_score"
	LogisticsScore Path = "logistics_score"
)

/*
{
  "code": 0,
  "success": true,
  "msg": "成功",
  "data": {
    "review_info_list": [
      {
        "sku_info": {
          "sku_id": "662541bfe265da0001b257b3",
          "name": "【笔记同款】不锈钢带钩裤夹多功能夹子无痕帽子短裤 【🌟第二代-双头浸胶】米白 买15送15--共30个",
          "image_link": "//qimg.xiaohongshu.com/arkgoods/104100ao311rhh21r10066dc63ejjl00006d2b7kf0mgsg?itemId=662541bfe265da0001b257b3&imageView2/1/w/320/h/320/q/90.jpeg",
          "item_id": "6564c049474aad0001c7641a",
          "order_id": "P745021533103367131",
          "price": 2700,
          "quantity": 1,
          "variants": [
            {
              "id": "5a60c42f69bd891ed8939bc2",
              "name": "款式",
              "value": "【🌟第二代-双头浸胶】米白"
            },
            {
              "id": "5a60c42f69bd891ed8939a42",
              "name": "包装数量",
              "value": "买15送15--共30个"
            }
          ]
        },
        "review_data": {
          "content": {
            "text": "包装特别烂，薄薄的一层纸盒其它没了，好歹也拿个泡泡袋装起来，纸盒多处破损，还好里面架子没有明显瑕疵。架子就是直接裸着塞在里面的钩子和钩子打架整理了好久。",
            "images": [
              {
                "link": "https://qimg.xiaohongshu.com/comment/1040g2u0319ba13be6a005n5hug25ojk3267o7to"
              }
            ]
          },
          "create_time": 1729772481,
          "tags": [],
          "anonymous": true,
          "review_id": "414154303596118952",
          "service_score": 5,
          "sku_score": 5,
          "logistics_score": 5,
          "descendants": [],
          "search_id": "92740503",
          "review_type": 4
        },
        "interation_info": {
          "like_num": 0,
          "reply_num": 0
        },
        "button_list": [
          {
            "text": "回复评价",
            "disabled": 0,
            "button_type": 9
          },
          {
            "disabled": 0,
            "button_type": 7,
            "status": 0,
            "text": "申诉评价"
          }
        ]
      },
      {
        "button_list": [
          {
            "text": "回复评价",
            "disabled": 0,
            "button_type": 9
          },
          {
            "status": 0,
            "text": "申诉评价",
            "disabled": 0,
            "button_type": 7
          }
        ],
        "sku_info": {
          "variants": [
            {
              "value": "原木色20钩",
              "id": "5a60c42f69bd891ed8939bc2",
              "name": "款式"
            },
            {
              "id": "5f71d3023faa42000156b10a",
              "name": "数量",
              "value": "3个装"
            }
          ],
          "sku_id": "669b9f0c0916240001ff6acb",
          "name": "实木波浪衣架内衣吊带衣架家用多功能挂钩背心女装收纳神器晾晒架 原木色20钩 3个装",
          "image_link": "//qimg.xiaohongshu.com/arkgoods/104100ao315fjtrsn1e066dc63ejjl00006d2b7jsqfbvm?itemId=669b9f0c0916240001ff6acb&imageView2/1/w/320/h/320/q/90.png",
          "item_id": "669b9f0c0916240001ff6ac4",
          "order_id": "P744461199153402613",
          "price": 4502,
          "quantity": 1
        },
        "review_data": {
          "review_id": "414147469536208725",
          "logistics_score": 5,
          "create_time": 1729770851,
          "search_id": "92729778",
          "anonymous": false,
          "sku_score": 5,
          "service_score": 5,
          "content": {
            "text": "衣架很有质感也很实用 分别挂了吊带 长裙和健身的小背心",
            "images": []
          },
          "tags": [],
          "descendants": [],
          "review_type": 4
        },
        "interation_info": {
          "reply_num": 0,
          "like_num": 0
        }
      }
    ],
    "total": 2
  }
}
*/
func (this *ReviewManager) unmarshal(response []byte) ([]*Review, error) {
	jsonData := gjson.ParseBytes(response)
	codeResult := jsonData.Get("code")
	if !codeResult.Exists() || codeResult.Int() != CODE_SUCCESS {
		msg := jsonData.Get("msg").String()
		return nil, errors.Errorf("response error:[%+v], jsondata:%+v", msg, jsonData.String())
	}

	s := Data.Join(ReviewInfoList).String()
	reviewInfoJson := jsonData.Get(s)
	if !(reviewInfoJson.Exists() && reviewInfoJson.IsArray()) {
		return nil, errors.Errorf("illegal json data. reviewInfoJson is not array. %#v", jsonData.String())
	}
	arrays := reviewInfoJson.Array()
	reviews := make([]*Review, 0, len(arrays))
	for _, reviewInfo := range arrays {
		review := &Review{}
		review.Id = reviewInfo.Get(ReviewData.Join(ReviewID).String()).String()
		review.Content = reviewInfo.Get(ReviewData.Join(Content).Join(Text).String()).String()
		review.ReplyNum = uint(reviewInfo.Get(InteractionInfo.Join(ReplyNum).String()).Int())

		sku := &SkuInfo{}
		sku.SkuID = reviewInfo.Get(SkuInfo1.Join(SkuID).String()).String()
		sku.ItemID = reviewInfo.Get(SkuInfo1.Join(ItemID).String()).String()
		sku.OrderID = reviewInfo.Get(SkuInfo1.Join(OrderID).String()).String()
		sku.SkuName = reviewInfo.Get(SkuInfo1.Join(SkuName).String()).String()
		sku.SkuPrice = int(reviewInfo.Get(SkuInfo1.Join(SkuPrice).String()).Int())
		review.SkuInfo = sku

		score := &Score{}
		score.LogisticsScore = uint8(reviewInfo.Get(ReviewData.Join(LogisticsScore).String()).Int())
		score.SkuScore = uint8(reviewInfo.Get(ReviewData.Join(SkuScore).String()).Int())
		score.ServiceScore = uint8(reviewInfo.Get(ReviewData.Join(ServiceScore).String()).Int())
		review.Score = score

		reviews = append(reviews, review)
	}
	return reviews, nil
}
