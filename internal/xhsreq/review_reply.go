package xhsreq

import (
	"bytes"
	"context"
	"io"
	"log/slog"
	"net/http"

	"github.com/davecgh/go-spew/spew"
	"github.com/go-playground/validator/v10"
	"github.com/pkg/errors"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"

	"PulseCheck/internal/tools"
)

type ReviewReplyParam struct {
	ReviewIds    []string `validate:"required"`
	ReplyContent string   `validate:"required"`
}

type ReviewReply struct {
	httpClient *http.Client
}

const (
	ReviewIDKey Path = "review_id"
	ContentKey  Path = "content"
	TextKey     Path = "text"
)

func (this *ReviewReply) newRequestBody(ctx context.Context, param *ReviewReplyParam) ([]byte, error) {
	validate := validator.New()
	err := validate.Struct(param)
	if err != nil {
		return nil, errors.WithMessagef(err, "validate param:%#v error.", param)
	}
	jsonData := []byte("{}")
	for i, reviewId := range param.ReviewIds {
		key := ReviewIDKey.Index(i)
		jsonData, _ = sjson.SetBytes(jsonData, key.String(), reviewId)
	}
	jsonData, _ = sjson.SetBytes(jsonData, ContentKey.Join(TextKey).String(), param.ReplyContent)
	return jsonData, nil
}

func NewReviewReply(ctx context.Context, httpClient *http.Client) *ReviewReply {
	return &ReviewReply{httpClient: httpClient}
}

const (
	Code Path = "code"
	Msg  Path = "msg"
)
const (
	ReplySuccess = 0
)

func (this *ReviewReply) verify(b []byte) error {
	jsonData := gjson.ParseBytes(b)
	jsonCode := jsonData.Get(Code.String())
	if jsonCode.Exists() {
		if jsonCode.Int() == ReplySuccess {
			return nil
		}
	}
	return errors.Errorf("msg:%s", jsonData.Get(Msg.String()))
}

const (
	XHSReviewReplyURL = "https://ark.xiaohongshu.com/api/edith/review/seller_reply"
)

func (this *ReviewReply) Reply(ctx context.Context, param *ReviewReplyParam) error {
	requestBody, err := this.newRequestBody(ctx, param)
	if nil != err {
		return errors.WithMessagef(err, "newRequestBody fail with param:%#v", param)
	}
	reqBodyStr := string(requestBody)
	slog.Info(spew.Sprintf("request body:%#v generated by param:%#v", reqBodyStr, param))
	request, err := http.NewRequestWithContext(ctx, http.MethodPost, XHSReviewReplyURL, bytes.NewReader(requestBody))
	if nil != err {
		return errors.WithMessagef(err, "construct xiaohongshu statistics request error. param:%#v, body:%#v", param, reqBodyStr)
	}
	err = ResetCommonHeaders(ctx, request.Header)
	AddRefererHeader(ctx, request.Header, "https://ark.xiaohongshu.com/app-item/comment/analysis")
	if nil != err {
		return errors.WithMessagef(err, "request header fail with param:%#v requestbody:%#v", param, reqBodyStr)
	}
	response, err := this.httpClient.Do(request)
	if nil != err {
		return errors.WithMessagef(err, "request failed with param:%#v requestBody:%#v", param, reqBodyStr)
	}
	statusCode := response.StatusCode
	if statusCode != http.StatusOK {
		slog.Error("get xiaohongshu response error.",
			slog.String("xiaohognshuURL", XHSReviewReplyURL),
			slog.Int("statusCode", statusCode),
			slog.String("body", string(requestBody)),
		)
		return errors.Errorf("get xiaohongshu response error. xiaohongshuURL:%s statusCode:%d requestBody:%s",
			XHSReviewMangerURL, statusCode, reqBodyStr)
	}
	respBody := response.Body
	defer func() {
		err := respBody.Close()
		if err != nil {
			slog.Error("close response body err.", tools.ErrAttr(err))
		}
	}()
	b, err := io.ReadAll(respBody)
	if err != nil {
		return errors.WithMessagef(err, "read response body fail with param:%#v body:%#v", param, reqBodyStr)
	}

	return this.verify(b)
}
